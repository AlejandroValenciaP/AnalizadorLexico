
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 29 13:51:15 CDT 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 29 13:51:15 CDT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\010\000\002\002" +
    "\011\000\002\002\010\000\002\002\012\000\002\002\017" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\011\000\002\004\006\000" +
    "\002\004\006\000\002\004\011\000\002\004\013\000\002" +
    "\004\005\000\002\004\016\000\002\004\016\000\002\004" +
    "\016\000\002\004\014\000\002\004\017\000\002\004\030" +
    "\000\002\004\005\000\002\004\012\000\002\004\013\000" +
    "\002\004\017\000\002\004\011\000\002\004\021\000\002" +
    "\004\016\000\002\004\016\000\002\004\013\000\002\004" +
    "\006\000\002\004\004\000\002\004\005\000\002\004\006" +
    "\000\002\004\007\000\002\004\010\000\002\004\011\000" +
    "\002\004\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\010\000\002\004\010\000\002\004" +
    "\011\000\002\004\011\000\002\004\013\000\002\004\014" +
    "\000\002\004\023\000\002\004\033\000\002\004\020\000" +
    "\002\004\023\000\002\004\021\000\002\004\022\000\002" +
    "\004\020\000\002\004\026\000\002\004\063\000\002\004" +
    "\035\000\002\004\025\000\002\004\025\000\002\004\051" +
    "\000\002\004\032\000\002\004\034\000\002\004\033\000" +
    "\002\004\040\000\002\004\032\000\002\004\032\000\002" +
    "\004\020\000\002\004\044\000\002\004\034\000\002\004" +
    "\051\000\002\004\047\000\002\004\055\000\002\004\036" +
    "\000\002\004\054\000\002\004\026\000\002\004\056\000" +
    "\002\004\023\000\002\004\067\000\002\004\025\000\002" +
    "\004\027\000\002\004\026\000\002\004\030\000\002\004" +
    "\034\000\002\004\025\000\002\004\034\000\002\004\026" +
    "\000\002\004\027\000\002\004\022\000\002\004\023\000" +
    "\002\004\024\000\002\004\024\000\002\004\023\000\002" +
    "\004\027\000\002\004\037\000\002\006\011\000\002\013" +
    "\003\000\002\013\005\000\002\013\012\000\002\013\011" +
    "\000\002\013\005\000\002\013\005\000\002\013\006\000" +
    "\002\013\007\000\002\007\015\000\002\010\011\000\002" +
    "\012\011\000\002\014\012\000\002\014\011\000\002\005" +
    "\005\000\002\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03bb\000\012\007\007\036\004\041\005\046\010\001" +
    "\002\000\004\030\u03b9\001\002\000\004\041\u03b2\001\002" +
    "\000\004\002\u03b1\001\002\000\004\036\u03ab\001\002\000" +
    "\006\041\011\046\012\001\002\000\004\041\u03a7\001\002" +
    "\000\004\046\013\001\002\000\004\036\014\001\002\000" +
    "\004\030\015\001\002\000\004\006\016\001\002\000\004" +
    "\034\017\001\002\000\004\035\020\001\002\000\004\046" +
    "\021\001\002\000\004\031\022\001\002\000\004\032\023" +
    "\001\002\000\024\006\032\007\036\010\031\011\027\013" +
    "\033\014\026\015\040\041\041\046\042\001\002\000\026" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\033\ufff4\041\ufff4\046\ufff4\001\002\000\026\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\015\ufff1\033" +
    "\ufff1\041\ufff1\046\ufff1\001\002\000\004\030\u03a1\001\002" +
    "\000\004\030\u0397\001\002\000\026\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa\033\ufffa\041\ufffa" +
    "\046\ufffa\001\002\000\004\041\u0388\001\002\000\006\026" +
    "\u02f8\041\u02f9\001\002\000\004\032\u02f0\001\002\000\026" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\033\ufff6\041\ufff6\046\ufff6\001\002\000\026\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\033" +
    "\ufff8\041\ufff8\046\ufff8\001\002\000\006\026\u02df\041\u02e0" +
    "\001\002\000\026\006\032\007\036\010\031\011\027\013" +
    "\033\014\026\015\040\033\u02de\041\041\046\042\001\002" +
    "\000\004\030\u02ae\001\002\000\012\016\u0206\030\u0204\041" +
    "\u0205\042\u0203\001\002\000\016\006\046\007\047\030\043" +
    "\037\044\044\045\046\050\001\002\000\004\041\u01fe\001" +
    "\002\000\026\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\033\uffd7\041\uffd7\046\uffd7\001\002\000" +
    "\004\046\164\001\002\000\004\041\134\001\002\000\004" +
    "\041\122\001\002\000\010\007\052\041\051\046\053\001" +
    "\002\000\004\016\111\001\002\000\004\041\103\001\002" +
    "\000\006\036\054\041\055\001\002\000\004\030\072\001" +
    "\002\000\004\030\056\001\002\000\004\031\057\001\002" +
    "\000\004\032\060\001\002\000\024\006\032\007\036\010" +
    "\031\011\027\013\033\014\026\015\040\041\041\046\042" +
    "\001\002\000\026\006\032\007\036\010\031\011\027\013" +
    "\033\014\026\015\040\033\067\041\041\046\042\001\002" +
    "\000\026\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\033\ufff5\041\ufff5\046\ufff5\001\002\000\026" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\033\ufff2\041\ufff2\046\ufff2\001\002\000\026\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\033" +
    "\ufffb\041\ufffb\046\ufffb\001\002\000\026\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\013\ufff7\014\ufff7\015\ufff7\033\ufff7\041" +
    "\ufff7\046\ufff7\001\002\000\026\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\013\ufff9\014\ufff9\015\ufff9\033\ufff9\041\ufff9\046" +
    "\ufff9\001\002\000\026\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\033\uffd9\041\uffd9\046\uffd9\001" +
    "\002\000\002\001\002\000\026\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\013\ufff3\014\ufff3\015\ufff3\033\ufff3\041\ufff3\046" +
    "\ufff3\001\002\000\004\006\073\001\002\000\004\034\074" +
    "\001\002\000\004\035\075\001\002\000\004\046\076\001" +
    "\002\000\004\031\077\001\002\000\004\032\100\001\002" +
    "\000\024\006\032\007\036\010\031\011\027\013\033\014" +
    "\026\015\040\041\041\046\042\001\002\000\026\006\032" +
    "\007\036\010\031\011\027\013\033\014\026\015\040\033" +
    "\102\041\041\046\042\001\002\000\026\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\013\uffde\014\uffde\015\uffde\033\uffde\041" +
    "\uffde\046\uffde\001\002\000\004\030\104\001\002\000\004" +
    "\031\105\001\002\000\004\032\106\001\002\000\024\006" +
    "\032\007\036\010\031\011\027\013\033\014\026\015\040" +
    "\041\041\046\042\001\002\000\026\006\032\007\036\010" +
    "\031\011\027\013\033\014\026\015\040\033\110\041\041" +
    "\046\042\001\002\000\026\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\033\uffe9\041\uffe9\046\uffe9" +
    "\001\002\000\004\046\112\001\002\000\004\046\113\001" +
    "\002\000\004\030\114\001\002\000\004\046\115\001\002" +
    "\000\004\044\116\001\002\000\004\046\117\001\002\000" +
    "\004\031\120\001\002\000\004\037\121\001\002\000\026" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\033\uffdb\041\uffdb\046\uffdb\001\002\000\004\030\123" +
    "\001\002\000\004\007\124\001\002\000\004\041\125\001" +
    "\002\000\004\031\126\001\002\000\004\041\127\001\002" +
    "\000\004\041\130\001\002\000\004\032\131\001\002\000" +
    "\024\006\032\007\036\010\031\011\027\013\033\014\026" +
    "\015\040\041\041\046\042\001\002\000\026\006\032\007" +
    "\036\010\031\011\027\013\033\014\026\015\040\033\133" +
    "\041\041\046\042\001\002\000\026\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7\033\uffe7\041\uffe7" +
    "\046\uffe7\001\002\000\004\030\135\001\002\000\010\006" +
    "\136\007\137\031\140\001\002\000\004\041\155\001\002" +
    "\000\004\041\146\001\002\000\004\041\141\001\002\000" +
    "\004\041\142\001\002\000\004\032\143\001\002\000\024" +
    "\006\032\007\036\010\031\011\027\013\033\014\026\015" +
    "\040\041\041\046\042\001\002\000\026\006\032\007\036" +
    "\010\031\011\027\013\033\014\026\015\040\033\145\041" +
    "\041\046\042\001\002\000\026\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\013\uffe4\014\uffe4\015\uffe4\033\uffe4\041\uffe4\046" +
    "\uffe4\001\002\000\004\031\147\001\002\000\004\041\150" +
    "\001\002\000\004\041\151\001\002\000\004\032\152\001" +
    "\002\000\024\006\032\007\036\010\031\011\027\013\033" +
    "\014\026\015\040\041\041\046\042\001\002\000\026\006" +
    "\032\007\036\010\031\011\027\013\033\014\026\015\040" +
    "\033\154\041\041\046\042\001\002\000\026\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\033\uffe6" +
    "\041\uffe6\046\uffe6\001\002\000\004\031\156\001\002\000" +
    "\004\041\157\001\002\000\004\041\160\001\002\000\004" +
    "\032\161\001\002\000\024\006\032\007\036\010\031\011" +
    "\027\013\033\014\026\015\040\041\041\046\042\001\002" +
    "\000\026\006\032\007\036\010\031\011\027\013\033\014" +
    "\026\015\040\033\163\041\041\046\042\001\002\000\026" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\033\uffe5\041\uffe5\046\uffe5\001\002\000\004\044\165" +
    "\001\002\000\004\041\166\001\002\000\004\030\167\001" +
    "\002\000\004\005\170\001\002\000\012\021\174\022\172" +
    "\041\173\042\171\001\002\000\004\044\u01ec\001\002\000" +
    "\004\041\u0167\001\002\000\004\041\206\001\002\000\004" +
    "\021\175\001\002\000\004\041\176\001\002\000\004\041" +
    "\177\001\002\000\004\041\200\001\002\000\004\021\201" +
    "\001\002\000\004\021\202\001\002\000\004\005\203\001" +
    "\002\000\004\031\204\001\002\000\004\037\205\001\002" +
    "\000\026\006\uffaa\007\uffaa\010\uffaa\011\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\033\uffaa\041\uffaa\046\uffaa\001\002\000\004" +
    "\041\207\001\002\000\004\041\210\001\002\000\004\041" +
    "\211\001\002\000\010\037\213\041\214\042\212\001\002" +
    "\000\004\037\u0163\001\002\000\004\005\u0135\001\002\000" +
    "\006\037\215\041\216\001\002\000\004\005\373\001\002" +
    "\000\006\037\217\041\220\001\002\000\004\005\353\001" +
    "\002\000\006\037\221\041\222\001\002\000\004\005\254" +
    "\001\002\000\006\037\223\041\224\001\002\000\004\005" +
    "\231\001\002\000\004\037\225\001\002\000\004\005\226" +
    "\001\002\000\004\031\227\001\002\000\004\037\230\001" +
    "\002\000\026\006\uffa0\007\uffa0\010\uffa0\011\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\033\uffa0\041\uffa0\046\uffa0\001\002\000" +
    "\006\017\232\031\233\001\002\000\004\030\235\001\002" +
    "\000\004\037\234\001\002\000\026\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\013\uffa1\014\uffa1\015\uffa1\033\uffa1\041\uffa1" +
    "\046\uffa1\001\002\000\004\041\236\001\002\000\004\020" +
    "\237\001\002\000\006\030\240\041\241\001\002\000\004" +
    "\041\245\001\002\000\004\031\242\001\002\000\004\031" +
    "\243\001\002\000\004\037\244\001\002\000\026\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\013\uffb2\014\uffb2\015\uffb2\033" +
    "\uffb2\041\uffb2\046\uffb2\001\002\000\004\021\246\001\002" +
    "\000\004\042\247\001\002\000\004\031\250\001\002\000" +
    "\004\031\251\001\002\000\004\031\252\001\002\000\004" +
    "\037\253\001\002\000\026\006\uffb7\007\uffb7\010\uffb7\011" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\033\uffb7\041\uffb7\046\uffb7" +
    "\001\002\000\004\017\255\001\002\000\010\030\257\041" +
    "\260\042\256\001\002\000\004\022\323\001\002\000\004" +
    "\041\263\001\002\000\004\031\261\001\002\000\004\037" +
    "\262\001\002\000\026\006\uff9a\007\uff9a\010\uff9a\011\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\033\uff9a\041\uff9a\046\uff9a\001" +
    "\002\000\006\021\265\022\264\001\002\000\004\042\276" +
    "\001\002\000\004\041\266\001\002\000\004\021\267\001" +
    "\002\000\004\041\270\001\002\000\004\022\271\001\002" +
    "\000\004\042\272\001\002\000\004\031\273\001\002\000" +
    "\004\031\274\001\002\000\004\037\275\001\002\000\026" +
    "\006\uff99\007\uff99\010\uff99\011\uff99\013\uff99\014\uff99\015" +
    "\uff99\033\uff99\041\uff99\046\uff99\001\002\000\004\031\277" +
    "\001\002\000\004\021\300\001\002\000\004\030\301\001" +
    "\002\000\004\041\302\001\002\000\004\017\303\001\002" +
    "\000\004\041\304\001\002\000\004\017\305\001\002\000" +
    "\004\030\306\001\002\000\004\041\307\001\002\000\004" +
    "\044\310\001\002\000\004\041\311\001\002\000\004\030" +
    "\312\001\002\000\004\041\313\001\002\000\004\021\314" +
    "\001\002\000\004\041\315\001\002\000\004\031\316\001" +
    "\002\000\004\031\317\001\002\000\004\031\320\001\002" +
    "\000\004\031\321\001\002\000\004\037\322\001\002\000" +
    "\026\006\uffad\007\uffad\010\uffad\011\uffad\013\uffad\014\uffad" +
    "\015\uffad\033\uffad\041\uffad\046\uffad\001\002\000\004\042" +
    "\324\001\002\000\004\021\325\001\002\000\004\041\326" +
    "\001\002\000\004\044\327\001\002\000\004\041\330\001" +
    "\002\000\004\021\331\001\002\000\004\030\332\001\002" +
    "\000\004\041\333\001\002\000\004\044\334\001\002\000" +
    "\004\041\335\001\002\000\004\030\336\001\002\000\004" +
    "\041\337\001\002\000\004\042\340\001\002\000\004\031" +
    "\341\001\002\000\004\031\342\001\002\000\004\021\343" +
    "\001\002\000\004\030\344\001\002\000\004\041\345\001" +
    "\002\000\004\017\346\001\002\000\004\041\347\001\002" +
    "\000\004\031\350\001\002\000\004\031\351\001\002\000" +
    "\004\037\352\001\002\000\026\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\013\uffaf\014\uffaf\015\uffaf\033\uffaf\041\uffaf\046" +
    "\uffaf\001\002\000\006\017\354\031\355\001\002\000\006" +
    "\030\357\041\360\001\002\000\004\037\356\001\002\000" +
    "\026\006\uff9d\007\uff9d\010\uff9d\011\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\033\uff9d\041\uff9d\046\uff9d\001\002\000\004\041" +
    "\363\001\002\000\004\031\361\001\002\000\004\037\362" +
    "\001\002\000\026\006\uffc0\007\uffc0\010\uffc0\011\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\033\uffc0\041\uffc0\046\uffc0\001\002" +
    "\000\004\021\364\001\002\000\004\041\365\001\002\000" +
    "\004\021\366\001\002\000\004\041\367\001\002\000\004" +
    "\031\370\001\002\000\004\031\371\001\002\000\004\037" +
    "\372\001\002\000\026\006\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\033\uffb9\041\uffb9\046\uffb9\001" +
    "\002\000\006\017\374\031\375\001\002\000\006\030\377" +
    "\041\u0100\001\002\000\004\037\376\001\002\000\026\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\033\uff9b\041\uff9b\046\uff9b\001\002\000\006\041\u0118\042" +
    "\u0117\001\002\000\006\031\u0102\044\u0101\001\002\000\004" +
    "\041\u0104\001\002\000\004\037\u0103\001\002\000\026\006" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\033\uffbc\041\uffbc\046\uffbc\001\002\000\004\021\u0105\001" +
    "\002\000\004\041\u0106\001\002\000\004\021\u0107\001\002" +
    "\000\004\030\u0108\001\002\000\004\030\u0109\001\002\000" +
    "\004\041\u010a\001\002\000\004\021\u010b\001\002\000\004" +
    "\041\u010c\001\002\000\004\031\u010d\001\002\000\004\020" +
    "\u010e\001\002\000\004\030\u010f\001\002\000\004\041\u0110" +
    "\001\002\000\004\021\u0111\001\002\000\004\041\u0112\001" +
    "\002\000\004\031\u0113\001\002\000\004\031\u0114\001\002" +
    "\000\004\031\u0115\001\002\000\004\037\u0116\001\002\000" +
    "\026\006\uffb0\007\uffb0\010\uffb0\011\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\033\uffb0\041\uffb0\046\uffb0\001\002\000\004\022" +
    "\u0120\001\002\000\004\021\u0119\001\002\000\004\041\u011a" +
    "\001\002\000\004\021\u011b\001\002\000\004\041\u011c\001" +
    "\002\000\004\031\u011d\001\002\000\004\031\u011e\001\002" +
    "\000\004\037\u011f\001\002\000\026\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\013\uffb8\014\uffb8\015\uffb8\033\uffb8\041\uffb8" +
    "\046\uffb8\001\002\000\004\042\u0121\001\002\000\004\031" +
    "\u0122\001\002\000\004\021\u0123\001\002\000\004\041\u0124" +
    "\001\002\000\004\044\u0125\001\002\000\004\041\u0126\001" +
    "\002\000\004\021\u0127\001\002\000\004\030\u0128\001\002" +
    "\000\004\041\u0129\001\002\000\004\044\u012a\001\002\000" +
    "\004\041\u012b\001\002\000\004\030\u012c\001\002\000\004" +
    "\041\u012d\001\002\000\004\042\u012e\001\002\000\004\031" +
    "\u012f\001\002\000\004\031\u0130\001\002\000\004\021\u0131" +
    "\001\002\000\004\041\u0132\001\002\000\004\031\u0133\001" +
    "\002\000\004\037\u0134\001\002\000\026\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1\033\uffb1\041" +
    "\uffb1\046\uffb1\001\002\000\006\017\u0136\031\u0137\001\002" +
    "\000\006\030\u0139\041\u013a\001\002\000\004\037\u0138\001" +
    "\002\000\026\006\uff9f\007\uff9f\010\uff9f\011\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\033\uff9f\041\uff9f\046\uff9f\001\002\000" +
    "\006\041\u014a\042\u0149\001\002\000\006\031\u013c\044\u013b" +
    "\001\002\000\004\041\u013e\001\002\000\004\037\u013d\001" +
    "\002\000\026\006\uff9c\007\uff9c\010\uff9c\011\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\033\uff9c\041\uff9c\046\uff9c\001\002\000" +
    "\004\021\u013f\001\002\000\004\030\u0140\001\002\000\004" +
    "\041\u0141\001\002\000\004\021\u0142\001\002\000\004\041" +
    "\u0143\001\002\000\004\031\u0144\001\002\000\004\021\u0145" +
    "\001\002\000\004\041\u0146\001\002\000\004\031\u0147\001" +
    "\002\000\004\037\u0148\001\002\000\026\006\uffae\007\uffae" +
    "\010\uffae\011\uffae\013\uffae\014\uffae\015\uffae\033\uffae\041" +
    "\uffae\046\uffae\001\002\000\004\021\u0152\001\002\000\004" +
    "\021\u014b\001\002\000\004\041\u014c\001\002\000\004\021" +
    "\u014d\001\002\000\004\041\u014e\001\002\000\004\031\u014f" +
    "\001\002\000\004\031\u0150\001\002\000\004\037\u0151\001" +
    "\002\000\026\006\uffba\007\uffba\010\uffba\011\uffba\013\uffba" +
    "\014\uffba\015\uffba\033\uffba\041\uffba\046\uffba\001\002\000" +
    "\004\041\u0153\001\002\000\004\044\u0154\001\002\000\004" +
    "\041\u0155\001\002\000\004\021\u0156\001\002\000\004\041" +
    "\u0157\001\002\000\004\021\u0158\001\002\000\004\041\u0159" +
    "\001\002\000\004\044\u015a\001\002\000\004\041\u015b\001" +
    "\002\000\004\030\u015c\001\002\000\004\041\u015d\001\002" +
    "\000\004\042\u015e\001\002\000\004\031\u015f\001\002\000" +
    "\004\031\u0160\001\002\000\004\031\u0161\001\002\000\004" +
    "\037\u0162\001\002\000\026\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\033\uffb3\041\uffb3\046\uffb3" +
    "\001\002\000\004\005\u0164\001\002\000\004\031\u0165\001" +
    "\002\000\004\037\u0166\001\002\000\026\006\uff9e\007\uff9e" +
    "\010\uff9e\011\uff9e\013\uff9e\014\uff9e\015\uff9e\033\uff9e\041" +
    "\uff9e\046\uff9e\001\002\000\010\021\u016a\022\u0168\041\u0169" +
    "\001\002\000\004\041\u01cd\001\002\000\006\037\u0198\041" +
    "\u0199\001\002\000\004\021\u016b\001\002\000\004\041\u016c" +
    "\001\002\000\006\021\u016e\041\u016d\001\002\000\006\021" +
    "\u017f\041\u017e\001\002\000\004\021\u016f\001\002\000\004" +
    "\022\u0170\001\002\000\004\041\u0171\001\002\000\006\005" +
    "\u0173\022\u0172\001\002\000\004\041\u0176\001\002\000\004" +
    "\031\u0174\001\002\000\004\037\u0175\001\002\000\026\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\033\uffa8\041\uffa8\046\uffa8\001\002\000\004\041\u0177\001" +
    "\002\000\004\041\u0178\001\002\000\004\022\u0179\001\002" +
    "\000\004\041\u017a\001\002\000\004\005\u017b\001\002\000" +
    "\004\031\u017c\001\002\000\004\037\u017d\001\002\000\026" +
    "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\033\uffc6\041\uffc6\046\uffc6\001\002\000\006\021\u0187" +
    "\041\u0186\001\002\000\004\021\u0180\001\002\000\004\022" +
    "\u0181\001\002\000\004\041\u0182\001\002\000\004\005\u0183" +
    "\001\002\000\004\031\u0184\001\002\000\004\037\u0185\001" +
    "\002\000\026\006\uffa6\007\uffa6\010\uffa6\011\uffa6\013\uffa6" +
    "\014\uffa6\015\uffa6\033\uffa6\041\uffa6\046\uffa6\001\002\000" +
    "\004\021\u0191\001\002\000\004\021\u0188\001\002\000\006" +
    "\005\u018a\022\u0189\001\002\000\004\041\u018d\001\002\000" +
    "\004\031\u018b\001\002\000\004\037\u018c\001\002\000\026" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\033\uffa3\041\uffa3\046\uffa3\001\002\000\004\005\u018e" +
    "\001\002\000\004\031\u018f\001\002\000\004\037\u0190\001" +
    "\002\000\026\006\uffa7\007\uffa7\010\uffa7\011\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\033\uffa7\041\uffa7\046\uffa7\001\002\000" +
    "\004\021\u0192\001\002\000\004\022\u0193\001\002\000\004" +
    "\041\u0194\001\002\000\004\005\u0195\001\002\000\004\031" +
    "\u0196\001\002\000\004\037\u0197\001\002\000\026\006\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\013\uffa5\014\uffa5\015\uffa5\033" +
    "\uffa5\041\uffa5\046\uffa5\001\002\000\004\005\u01ca\001\002" +
    "\000\006\022\u019a\041\u019b\001\002\000\004\041\u01a1\001" +
    "\002\000\004\041\u019c\001\002\000\004\041\u019d\001\002" +
    "\000\004\005\u019e\001\002\000\004\031\u019f\001\002\000" +
    "\004\037\u01a0\001\002\000\026\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\013\uffc7\014\uffc7\015\uffc7\033\uffc7\041\uffc7\046" +
    "\uffc7\001\002\000\004\041\u01a2\001\002\000\004\041\u01a3" +
    "\001\002\000\004\041\u01a4\001\002\000\004\022\u01a5\001" +
    "\002\000\004\041\u01a6\001\002\000\004\041\u01a7\001\002" +
    "\000\004\041\u01a8\001\002\000\004\041\u01a9\001\002\000" +
    "\004\041\u01aa\001\002\000\004\022\u01ab\001\002\000\004" +
    "\041\u01ac\001\002\000\004\041\u01ad\001\002\000\004\041" +
    "\u01ae\001\002\000\004\041\u01af\001\002\000\004\041\u01b0" +
    "\001\002\000\004\022\u01b1\001\002\000\004\041\u01b2\001" +
    "\002\000\004\041\u01b3\001\002\000\004\041\u01b4\001\002" +
    "\000\004\041\u01b5\001\002\000\004\022\u01b6\001\002\000" +
    "\004\041\u01b7\001\002\000\004\041\u01b8\001\002\000\004" +
    "\041\u01b9\001\002\000\004\041\u01ba\001\002\000\004\041" +
    "\u01bb\001\002\000\004\022\u01bc\001\002\000\004\041\u01bd" +
    "\001\002\000\004\041\u01be\001\002\000\004\041\u01bf\001" +
    "\002\000\004\041\u01c0\001\002\000\004\041\u01c1\001\002" +
    "\000\004\022\u01c2\001\002\000\004\041\u01c3\001\002\000" +
    "\004\041\u01c4\001\002\000\004\041\u01c5\001\002\000\004" +
    "\041\u01c6\001\002\000\004\005\u01c7\001\002\000\004\031" +
    "\u01c8\001\002\000\004\037\u01c9\001\002\000\026\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\033" +
    "\uffa9\041\uffa9\046\uffa9\001\002\000\004\031\u01cb\001\002" +
    "\000\004\037\u01cc\001\002\000\026\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\013\uffc5\014\uffc5\015\uffc5\033\uffc5\041\uffc5" +
    "\046\uffc5\001\002\000\006\023\u01ce\041\u01cf\001\002\000" +
    "\004\041\u01de\001\002\000\004\041\u01d0\001\002\000\004" +
    "\041\u01d1\001\002\000\004\041\u01d2\001\002\000\004\041" +
    "\u01d3\001\002\000\004\041\u01d4\001\002\000\004\030\u01d5" +
    "\001\002\000\004\041\u01d6\001\002\000\004\022\u01d7\001" +
    "\002\000\004\041\u01d8\001\002\000\004\031\u01d9\001\002" +
    "\000\004\041\u01da\001\002\000\004\005\u01db\001\002\000" +
    "\004\031\u01dc\001\002\000\004\037\u01dd\001\002\000\026" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\033\uffa4\041\uffa4\046\uffa4\001\002\000\004\041\u01df" +
    "\001\002\000\004\041\u01e0\001\002\000\004\041\u01e1\001" +
    "\002\000\004\023\u01e2\001\002\000\004\030\u01e3\001\002" +
    "\000\004\041\u01e4\001\002\000\004\022\u01e5\001\002\000" +
    "\004\041\u01e6\001\002\000\004\031\u01e7\001\002\000\004" +
    "\037\u01e8\001\002\000\004\005\u01e9\001\002\000\004\031" +
    "\u01ea\001\002\000\004\037\u01eb\001\002\000\026\006\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\013\uffa2\014\uffa2\015\uffa2\033" +
    "\uffa2\041\uffa2\046\uffa2\001\002\000\004\020\u01ed\001\002" +
    "\000\004\041\u01ee\001\002\000\006\005\u01ef\041\u01f0\001" +
    "\002\000\004\031\u01fc\001\002\000\006\005\u01f1\041\u01f2" +
    "\001\002\000\004\031\u01fa\001\002\000\006\005\u01f3\041" +
    "\u01f4\001\002\000\004\031\u01f8\001\002\000\004\005\u01f5" +
    "\001\002\000\004\031\u01f6\001\002\000\004\037\u01f7\001" +
    "\002\000\026\006\uffc4\007\uffc4\010\uffc4\011\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\033\uffc4\041\uffc4\046\uffc4\001\002\000" +
    "\004\037\u01f9\001\002\000\026\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\013\uffc2\014\uffc2\015\uffc2\033\uffc2\041\uffc2\046" +
    "\uffc2\001\002\000\004\037\u01fb\001\002\000\026\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\033" +
    "\uffc3\041\uffc3\046\uffc3\001\002\000\004\037\u01fd\001\002" +
    "\000\026\006\uffc1\007\uffc1\010\uffc1\011\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\033\uffc1\041\uffc1\046\uffc1\001\002\000\004" +
    "\031\u01ff\001\002\000\004\032\u0200\001\002\000\024\006" +
    "\032\007\036\010\031\011\027\013\033\014\026\015\040" +
    "\041\041\046\042\001\002\000\026\006\032\007\036\010" +
    "\031\011\027\013\033\014\026\015\040\033\u0202\041\041" +
    "\046\042\001\002\000\026\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\013\uffea\014\uffea\015\uffea\033\uffea\041\uffea\046\uffea" +
    "\001\002\000\004\037\u02ad\001\002\000\004\031\u02ab\001" +
    "\002\000\012\016\u0291\037\u028e\041\u0290\044\u028f\001\002" +
    "\000\010\030\u0208\041\u0209\042\u0207\001\002\000\004\022" +
    "\u027d\001\002\000\010\030\u0227\041\u0228\042\u0226\001\002" +
    "\000\006\021\u020b\044\u020a\001\002\000\004\041\u0212\001" +
    "\002\000\004\041\u020c\001\002\000\004\021\u020d\001\002" +
    "\000\004\041\u020e\001\002\000\004\022\u020f\001\002\000" +
    "\004\042\u0210\001\002\000\004\037\u0211\001\002\000\026" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\033\uffc8\041\uffc8\046\uffc8\001\002\000\006\021\u0214" +
    "\030\u0213\001\002\000\006\031\u021e\041\u021d\001\002\000" +
    "\004\030\u0215\001\002\000\004\041\u0216\001\002\000\004" +
    "\021\u0217\001\002\000\004\041\u0218\001\002\000\004\031" +
    "\u0219\001\002\000\004\021\u021a\001\002\000\004\041\u021b" +
    "\001\002\000\004\037\u021c\001\002\000\026\006\uffb4\007" +
    "\uffb4\010\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\033\uffb4" +
    "\041\uffb4\046\uffb4\001\002\000\004\044\u0220\001\002\000" +
    "\004\037\u021f\001\002\000\026\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\013\uffe0\014\uffe0\015\uffe0\033\uffe0\041\uffe0\046" +
    "\uffe0\001\002\000\004\041\u0221\001\002\000\004\030\u0222" +
    "\001\002\000\004\031\u0223\001\002\000\004\031\u0224\001" +
    "\002\000\004\037\u0225\001\002\000\026\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3\033\uffe3\041" +
    "\uffe3\046\uffe3\001\002\000\004\022\u0263\001\002\000\004" +
    "\042\u0251\001\002\000\004\044\u0229\001\002\000\004\041" +
    "\u022a\001\002\000\004\021\u022b\001\002\000\004\041\u022c" +
    "\001\002\000\004\031\u022d\001\002\000\004\021\u022e\001" +
    "\002\000\004\030\u022f\001\002\000\004\042\u0230\001\002" +
    "\000\004\021\u0231\001\002\000\004\030\u0232\001\002\000" +
    "\004\041\u0233\001\002\000\004\044\u0234\001\002\000\004" +
    "\041\u0235\001\002\000\004\030\u0236\001\002\000\004\041" +
    "\u0237\001\002\000\004\042\u0238\001\002\000\004\031\u0239" +
    "\001\002\000\004\031\u023a\001\002\000\004\031\u023b\001" +
    "\002\000\004\017\u023c\001\002\000\004\041\u023d\001\002" +
    "\000\004\044\u023e\001\002\000\004\041\u023f\001\002\000" +
    "\004\030\u0240\001\002\000\004\041\u0241\001\002\000\004" +
    "\042\u0242\001\002\000\004\031\u0243\001\002\000\004\020" +
    "\u0244\001\002\000\004\030\u0245\001\002\000\004\042\u0246" +
    "\001\002\000\004\022\u0247\001\002\000\004\042\u0248\001" +
    "\002\000\004\021\u0249\001\002\000\004\030\u024a\001\002" +
    "\000\004\041\u024b\001\002\000\004\020\u024c\001\002\000" +
    "\004\041\u024d\001\002\000\004\031\u024e\001\002\000\004" +
    "\031\u024f\001\002\000\004\037\u0250\001\002\000\026\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\013\uffab\014\uffab\015\uffab" +
    "\033\uffab\041\uffab\046\uffab\001\002\000\004\021\u0252\001" +
    "\002\000\004\030\u0253\001\002\000\004\041\u0254\001\002" +
    "\000\004\044\u0255\001\002\000\004\041\u0256\001\002\000" +
    "\004\030\u0257\001\002\000\004\041\u0258\001\002\000\004" +
    "\042\u0259\001\002\000\004\031\u025a\001\002\000\004\031" +
    "\u025b\001\002\000\004\031\u025c\001\002\000\004\021\u025d" +
    "\001\002\000\004\041\u025e\001\002\000\004\031\u025f\001" +
    "\002\000\004\022\u0260\001\002\000\004\042\u0261\001\002" +
    "\000\004\037\u0262\001\002\000\026\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\033\uffe2\041\uffe2" +
    "\046\uffe2\001\002\000\004\042\u0264\001\002\000\004\031" +
    "\u0265\001\002\000\004\021\u0266\001\002\000\004\041\u0267" +
    "\001\002\000\004\044\u0268\001\002\000\004\041\u0269\001" +
    "\002\000\004\021\u026a\001\002\000\004\030\u026b\001\002" +
    "\000\004\041\u026c\001\002\000\004\044\u026d\001\002\000" +
    "\004\041\u026e\001\002\000\004\030\u026f\001\002\000\004" +
    "\041\u0270\001\002\000\006\022\u0271\042\u0272\001\002\000" +
    "\004\042\u0278\001\002\000\004\031\u0273\001\002\000\004" +
    "\031\u0274\001\002\000\004\021\u0275\001\002\000\004\041" +
    "\u0276\001\002\000\004\037\u0277\001\002\000\026\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6\033" +
    "\uffb6\041\uffb6\046\uffb6\001\002\000\004\042\u0279\001\002" +
    "\000\004\031\u027a\001\002\000\004\031\u027b\001\002\000" +
    "\004\037\u027c\001\002\000\026\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\013\uffb5\014\uffb5\015\uffb5\033\uffb5\041\uffb5\046" +
    "\uffb5\001\002\000\004\042\u027e\001\002\000\004\021\u027f" +
    "\001\002\000\004\030\u0280\001\002\000\004\041\u0281\001" +
    "\002\000\004\017\u0282\001\002\000\004\030\u0283\001\002" +
    "\000\004\042\u0284\001\002\000\004\021\u0285\001\002\000" +
    "\004\041\u0286\001\002\000\004\031\u0287\001\002\000\004" +
    "\017\u0288\001\002\000\004\041\u0289\001\002\000\004\031" +
    "\u028a\001\002\000\004\021\u028b\001\002\000\004\041\u028c" +
    "\001\002\000\004\037\u028d\001\002\000\026\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\013\uffac\014\uffac\015\uffac\033\uffac" +
    "\041\uffac\046\uffac\001\002\000\026\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\033\uffe1\041\uffe1" +
    "\046\uffe1\001\002\000\004\041\u02a7\001\002\000\004\016" +
    "\u029e\001\002\000\004\046\u0292\001\002\000\004\041\u0293" +
    "\001\002\000\004\030\u0294\001\002\000\004\046\u0295\001" +
    "\002\000\004\041\u0296\001\002\000\004\030\u0297\001\002" +
    "\000\004\046\u0298\001\002\000\004\044\u0299\001\002\000" +
    "\004\046\u029a\001\002\000\004\031\u029b\001\002\000\004" +
    "\031\u029c\001\002\000\004\037\u029d\001\002\000\026\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\033\uffdc\041\uffdc\046\uffdc\001\002\000\004\041\u029f\001" +
    "\002\000\004\041\u02a0\001\002\000\004\030\u02a1\001\002" +
    "\000\004\041\u02a2\001\002\000\004\044\u02a3\001\002\000" +
    "\004\041\u02a4\001\002\000\004\031\u02a5\001\002\000\004" +
    "\037\u02a6\001\002\000\026\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\013\uffda\014\uffda\015\uffda\033\uffda\041\uffda\046\uffda" +
    "\001\002\000\004\030\u02a8\001\002\000\004\031\u02a9\001" +
    "\002\000\004\037\u02aa\001\002\000\026\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\013\uffdd\014\uffdd\015\uffdd\033\uffdd\041" +
    "\uffdd\046\uffdd\001\002\000\004\037\u02ac\001\002\000\026" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\033\uffd8\041\uffd8\046\uffd8\001\002\000\026\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\033" +
    "\uffe8\041\uffe8\046\uffe8\001\002\000\006\006\u02b0\041\u02b1" +
    "\001\002\000\004\031\u02da\001\002\000\004\041\u02d3\001" +
    "\002\000\004\016\u02b2\001\002\000\004\042\u02b3\001\002" +
    "\000\004\037\u02b4\001\002\000\006\027\u02b6\041\u02b7\001" +
    "\002\000\004\037\u02cb\001\002\000\006\031\uff97\037\uff97" +
    "\001\002\000\006\024\u02b8\044\u02b9\001\002\000\012\005" +
    "\u02c1\027\u02c2\041\u02c3\042\u02c0\001\002\000\004\041\u02ba" +
    "\001\002\000\004\030\u02bb\001\002\000\004\005\u02bc\001" +
    "\002\000\004\041\u02bd\001\002\000\004\005\u02be\001\002" +
    "\000\004\031\u02bf\001\002\000\006\031\uff95\037\uff95\001" +
    "\002\000\010\023\u02c7\031\uff93\037\uff93\001\002\000\006" +
    "\005\u02c4\041\u02c5\001\002\000\006\031\uff96\037\uff96\001" +
    "\002\000\006\031\uff92\037\uff92\001\002\000\006\031\uff91" +
    "\037\uff91\001\002\000\004\005\u02c6\001\002\000\006\031" +
    "\uff90\037\uff90\001\002\000\004\041\u02c8\001\002\000\004" +
    "\024\u02c9\001\002\000\004\042\u02ca\001\002\000\006\031" +
    "\uff94\037\uff94\001\002\000\006\026\u02cd\041\u02ce\001\002" +
    "\000\004\031\uff8b\001\002\000\004\041\u02d2\001\002\000" +
    "\006\025\u02cf\026\u02d0\001\002\000\004\042\u02d1\001\002" +
    "\000\004\031\uff89\001\002\000\004\031\uff8a\001\002\000" +
    "\004\031\uff88\001\002\000\004\016\u02d4\001\002\000\004" +
    "\042\u02d5\001\002\000\004\037\u02d6\001\002\000\006\027" +
    "\u02b6\041\u02b7\001\002\000\004\037\u02d8\001\002\000\006" +
    "\026\u02cd\041\u02ce\001\002\000\004\031\uff8c\001\002\000" +
    "\004\032\u02db\001\002\000\024\006\032\007\036\010\031" +
    "\011\027\013\033\014\026\015\040\041\041\046\042\001" +
    "\002\000\026\006\032\007\036\010\031\011\027\013\033" +
    "\014\026\015\040\033\u02dd\041\041\046\042\001\002\000" +
    "\026\006\uff8d\007\uff8d\010\uff8d\011\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\033\uff8d\041\uff8d\046\uff8d\001\002\000\004\002" +
    "\ufffc\001\002\000\004\041\u02ee\001\002\000\012\016\u02e4" +
    "\025\u02e1\026\u02e3\037\u02e2\001\002\000\004\042\u02ec\001" +
    "\002\000\026\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\033\ufff0\041\ufff0\046\ufff0\001\002\000" +
    "\004\037\u02eb\001\002\000\006\041\u02e6\042\u02e5\001\002" +
    "\000\004\037\u02ea\001\002\000\004\030\u02e7\001\002\000" +
    "\004\031\u02e8\001\002\000\004\037\u02e9\001\002\000\026" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed\014\uffed\015" +
    "\uffed\033\uffed\041\uffed\046\uffed\001\002\000\026\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\013\uffee\014\uffee\015\uffee\033" +
    "\uffee\041\uffee\046\uffee\001\002\000\026\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\013\uffec\014\uffec\015\uffec\033\uffec\041" +
    "\uffec\046\uffec\001\002\000\004\037\u02ed\001\002\000\026" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef\014\uffef\015" +
    "\uffef\033\uffef\041\uffef\046\uffef\001\002\000\004\037\u02ef" +
    "\001\002\000\026\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\033\uffeb\041\uffeb\046\uffeb\001\002" +
    "\000\024\006\032\007\036\010\031\011\027\013\033\014" +
    "\026\015\040\041\041\046\042\001\002\000\026\006\032" +
    "\007\036\010\031\011\027\013\033\014\026\015\040\033" +
    "\u02f2\041\041\046\042\001\002\000\004\014\u02f3\001\002" +
    "\000\004\030\u02f4\001\002\000\006\027\u02b6\041\u02b7\001" +
    "\002\000\004\031\u02f6\001\002\000\004\037\u02f7\001\002" +
    "\000\026\006\uffc9\007\uffc9\010\uffc9\011\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\033\uffc9\041\uffc9\046\uffc9\001\002\000\004" +
    "\041\u0386\001\002\000\014\016\u02fe\025\u02fa\026\u02fc\037" +
    "\u02fb\041\u02fd\001\002\000\004\042\u0384\001\002\000\026" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\033\uffd6\041\uffd6\046\uffd6\001\002\000\004\037\u0383" +
    "\001\002\000\006\037\u037c\041\u037d\001\002\000\010\030" +
    "\u0300\041\u0301\042\u02ff\001\002\000\006\037\u036c\044\u036d" +
    "\001\002\000\006\030\u0307\041\u0308\001\002\000\004\044" +
    "\u0302\001\002\000\004\041\u0303\001\002\000\004\030\u0304" +
    "\001\002\000\004\031\u0305\001\002\000\004\037\u0306\001" +
    "\002\000\026\006\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\033\uffdf\041\uffdf\046\uffdf\001\002\000" +
    "\004\041\u031f\001\002\000\004\044\u0309\001\002\000\004" +
    "\041\u030a\001\002\000\004\021\u030b\001\002\000\004\041" +
    "\u030c\001\002\000\004\044\u030d\001\002\000\004\041\u030e" +
    "\001\002\000\004\030\u030f\001\002\000\004\041\u0310\001" +
    "\002\000\004\042\u0311\001\002\000\004\031\u0312\001\002" +
    "\000\004\031\u0313\001\002\000\004\021\u0314\001\002\000" +
    "\004\030\u0315\001\002\000\004\041\u0316\001\002\000\004" +
    "\020\u0317\001\002\000\004\030\u0318\001\002\000\004\041" +
    "\u0319\001\002\000\004\022\u031a\001\002\000\004\042\u031b" +
    "\001\002\000\004\031\u031c\001\002\000\004\031\u031d\001" +
    "\002\000\004\037\u031e\001\002\000\026\006\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\033\uffbe\041" +
    "\uffbe\046\uffbe\001\002\000\006\021\u0321\044\u0320\001\002" +
    "\000\004\041\u0342\001\002\000\004\041\u0322\001\002\000" +
    "\004\044\u0323\001\002\000\004\041\u0324\001\002\000\004" +
    "\031\u0325\001\002\000\004\022\u0326\001\002\000\004\042" +
    "\u0327\001\002\000\004\031\u0328\001\002\000\004\021\u0329" +
    "\001\002\000\004\030\u032a\001\002\000\004\041\u032b\001" +
    "\002\000\004\044\u032c\001\002\000\004\041\u032d\001\002" +
    "\000\004\030\u032e\001\002\000\004\041\u032f\001\002\000" +
    "\004\042\u0330\001\002\000\004\031\u0331\001\002\000\004" +
    "\017\u0332\001\002\000\004\030\u0333\001\002\000\004\041" +
    "\u0334\001\002\000\004\021\u0335\001\002\000\004\041\u0336" +
    "\001\002\000\004\031\u0337\001\002\000\004\017\u0338\001" +
    "\002\000\004\041\u0339\001\002\000\004\044\u033a\001\002" +
    "\000\004\041\u033b\001\002\000\004\030\u033c\001\002\000" +
    "\004\041\u033d\001\002\000\004\042\u033e\001\002\000\004" +
    "\031\u033f\001\002\000\004\031\u0340\001\002\000\004\037" +
    "\u0341\001\002\000\026\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\033\uffbb\041\uffbb\046\uffbb\001" +
    "\002\000\004\021\u0343\001\002\000\004\041\u0344\001\002" +
    "\000\004\031\u0345\001\002\000\004\022\u0346\001\002\000" +
    "\004\042\u0347\001\002\000\004\031\u0348\001\002\000\004" +
    "\021\u0349\001\002\000\004\030\u034a\001\002\000\004\030" +
    "\u034b\001\002\000\004\042\u034c\001\002\000\004\021\u034d" +
    "\001\002\000\004\041\u034e\001\002\000\004\044\u034f\001" +
    "\002\000\004\041\u0350\001\002\000\004\030\u0351\001\002" +
    "\000\004\041\u0352\001\002\000\004\042\u0353\001\002\000" +
    "\004\031\u0354\001\002\000\004\031\u0355\001\002\000\004" +
    "\017\u0356\001\002\000\004\030\u0357\001\002\000\004\042" +
    "\u0358\001\002\000\004\021\u0359\001\002\000\004\041\u035a" +
    "\001\002\000\004\044\u035b\001\002\000\004\041\u035c\001" +
    "\002\000\004\030\u035d\001\002\000\004\041\u035e\001\002" +
    "\000\004\042\u035f\001\002\000\004\031\u0360\001\002\000" +
    "\004\031\u0361\001\002\000\004\017\u0362\001\002\000\004" +
    "\041\u0363\001\002\000\004\044\u0364\001\002\000\004\041" +
    "\u0365\001\002\000\004\030\u0366\001\002\000\004\041\u0367" +
    "\001\002\000\004\042\u0368\001\002\000\004\031\u0369\001" +
    "\002\000\004\031\u036a\001\002\000\004\037\u036b\001\002" +
    "\000\026\006\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\033\uffbf\041\uffbf\046\uffbf\001\002\000\026" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\033\uffd0\041\uffd0\046\uffd0\001\002\000\004\042\u036e" +
    "\001\002\000\004\021\u036f\001\002\000\004\041\u0370\001" +
    "\002\000\004\044\u0371\001\002\000\004\041\u0372\001\002" +
    "\000\004\021\u0373\001\002\000\004\041\u0374\001\002\000" +
    "\004\044\u0375\001\002\000\004\041\u0376\001\002\000\004" +
    "\030\u0377\001\002\000\004\041\u0378\001\002\000\004\042" +
    "\u0379\001\002\000\004\031\u037a\001\002\000\004\037\u037b" +
    "\001\002\000\026\006\uffbd\007\uffbd\010\uffbd\011\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\033\uffbd\041\uffbd\046\uffbd\001\002" +
    "\000\026\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\033\uffd5\041\uffd5\046\uffd5\001\002\000\006" +
    "\037\u037e\041\u037f\001\002\000\026\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\033\uffd4\041\uffd4" +
    "\046\uffd4\001\002\000\006\037\u0380\041\u0381\001\002\000" +
    "\026\006\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\033\uffd3\041\uffd3\046\uffd3\001\002\000\004\037" +
    "\u0382\001\002\000\026\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\033\uffd2\041\uffd2\046\uffd2\001" +
    "\002\000\026\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\033\uffcf\041\uffcf\046\uffcf\001\002\000" +
    "\004\037\u0385\001\002\000\026\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\013\uffd1\014\uffd1\015\uffd1\033\uffd1\041\uffd1\046" +
    "\uffd1\001\002\000\004\037\u0387\001\002\000\026\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\013\uffce\014\uffce\015\uffce\033" +
    "\uffce\041\uffce\046\uffce\001\002\000\006\016\u038a\025\u0389" +
    "\001\002\000\004\005\u0391\001\002\000\004\005\u038b\001" +
    "\002\000\006\005\u038c\041\u038d\001\002\000\004\037\u0390" +
    "\001\002\000\004\005\u038e\001\002\000\004\037\u038f\001" +
    "\002\000\026\006\uffca\007\uffca\010\uffca\011\uffca\013\uffca" +
    "\014\uffca\015\uffca\033\uffca\041\uffca\046\uffca\001\002\000" +
    "\026\006\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\033\uffcc\041\uffcc\046\uffcc\001\002\000\006\005" +
    "\u0392\041\u0393\001\002\000\004\037\u0396\001\002\000\004" +
    "\005\u0394\001\002\000\004\037\u0395\001\002\000\026\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\033\uffcb\041\uffcb\046\uffcb\001\002\000\026\006\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd\033\uffcd" +
    "\041\uffcd\046\uffcd\001\002\000\006\027\u02b6\041\u02b7\001" +
    "\002\000\004\031\u0399\001\002\000\004\032\u039a\001\002" +
    "\000\024\006\032\007\036\010\031\011\027\013\033\014" +
    "\026\015\040\041\041\046\042\001\002\000\026\006\032" +
    "\007\036\010\031\011\027\013\033\014\026\015\040\033" +
    "\u039c\041\041\046\042\001\002\000\030\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\012\u039d\013\uff98\014\uff98\015\uff98\033" +
    "\uff98\041\uff98\046\uff98\001\002\000\004\032\u039e\001\002" +
    "\000\024\006\032\007\036\010\031\011\027\013\033\014" +
    "\026\015\040\041\041\046\042\001\002\000\026\006\032" +
    "\007\036\010\031\011\027\013\033\014\026\015\040\033" +
    "\u03a0\041\041\046\042\001\002\000\026\006\uff8f\007\uff8f" +
    "\010\uff8f\011\uff8f\013\uff8f\014\uff8f\015\uff8f\033\uff8f\041" +
    "\uff8f\046\uff8f\001\002\000\006\027\u02b6\041\u02b7\001\002" +
    "\000\004\031\u03a3\001\002\000\004\032\u03a4\001\002\000" +
    "\024\006\032\007\036\010\031\011\027\013\033\014\026" +
    "\015\040\041\041\046\042\001\002\000\026\006\032\007" +
    "\036\010\031\011\027\013\033\014\026\015\040\033\u03a6" +
    "\041\041\046\042\001\002\000\026\006\uff8e\007\uff8e\010" +
    "\uff8e\011\uff8e\013\uff8e\014\uff8e\015\uff8e\033\uff8e\041\uff8e" +
    "\046\uff8e\001\002\000\004\032\u03a8\001\002\000\024\006" +
    "\032\007\036\010\031\011\027\013\033\014\026\015\040" +
    "\041\041\046\042\001\002\000\026\006\032\007\036\010" +
    "\031\011\027\013\033\014\026\015\040\033\u03aa\041\041" +
    "\046\042\001\002\000\004\002\000\001\002\000\004\030" +
    "\u03ac\001\002\000\004\031\u03ad\001\002\000\004\032\u03ae" +
    "\001\002\000\024\006\032\007\036\010\031\011\027\013" +
    "\033\014\026\015\040\041\041\046\042\001\002\000\026" +
    "\006\032\007\036\010\031\011\027\013\033\014\026\015" +
    "\040\033\u03b0\041\041\046\042\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\044\u03b3\001" +
    "\002\000\004\041\u03b4\001\002\000\004\044\u03b5\001\002" +
    "\000\004\046\u03b6\001\002\000\004\037\u03b7\001\002\000" +
    "\012\007\007\036\004\041\005\046\010\001\002\000\004" +
    "\002\ufffd\001\002\000\004\031\u03ba\001\002\000\004\032" +
    "\u03bb\001\002\000\024\006\032\007\036\010\031\011\027" +
    "\013\033\014\026\015\040\041\041\046\042\001\002\000" +
    "\026\006\032\007\036\010\031\011\027\013\033\014\026" +
    "\015\040\033\u03bd\041\041\046\042\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03bb\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\036\004\027\006\034\007\033" +
    "\010\023\012\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\063\006\065\007\064\010\061\011\067\012\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\060\004\027\006\034\007\033\010\023\012" +
    "\024\001\001\000\016\004\063\006\065\007\064\010\061" +
    "\011\067\012\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\100\004\027\006\034\007\033\010\023\012\024" +
    "\001\001\000\016\004\063\006\065\007\064\010\061\011" +
    "\067\012\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\106\004" +
    "\027\006\034\007\033\010\023\012\024\001\001\000\016" +
    "\004\063\006\065\007\064\010\061\011\067\012\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\131\004\027\006\034\007" +
    "\033\010\023\012\024\001\001\000\016\004\063\006\065" +
    "\007\064\010\061\011\067\012\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\143\004\027\006\034\007\033" +
    "\010\023\012\024\001\001\000\016\004\063\006\065\007" +
    "\064\010\061\011\067\012\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\152\004\027\006\034\007\033" +
    "\010\023\012\024\001\001\000\016\004\063\006\065\007" +
    "\064\010\061\011\067\012\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\161\004\027\006\034\007\033" +
    "\010\023\012\024\001\001\000\016\004\063\006\065\007" +
    "\064\010\061\011\067\012\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\u0200\004\027\006\034\007\033\010\023\012\024\001" +
    "\001\000\016\004\063\006\065\007\064\010\061\011\067" +
    "\012\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u02ae\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u02b4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u02cb\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u02d6\001\001\000\002\001\001\000\004\005" +
    "\u02d8\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\u02db\004\027\006\034\007\033\010\023\012\024\001" +
    "\001\000\016\004\063\006\065\007\064\010\061\011\067" +
    "\012\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\u02f0\004\027\006\034\007\033\010" +
    "\023\012\024\001\001\000\016\004\063\006\065\007\064" +
    "\010\061\011\067\012\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u02f4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0397\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\u039a\004" +
    "\027\006\034\007\033\010\023\012\024\001\001\000\016" +
    "\004\063\006\065\007\064\010\061\011\067\012\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\u039e" +
    "\004\027\006\034\007\033\010\023\012\024\001\001\000" +
    "\016\004\063\006\065\007\064\010\061\011\067\012\062" +
    "\001\001\000\002\001\001\000\004\013\u03a1\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\u03a4\004\027" +
    "\006\034\007\033\010\023\012\024\001\001\000\016\004" +
    "\063\006\065\007\064\010\061\011\067\012\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\u03a8\004" +
    "\027\006\034\007\033\010\023\012\024\001\001\000\016" +
    "\004\063\006\065\007\064\010\061\011\067\012\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\u03ae\004\027\006\034\007" +
    "\033\010\023\012\024\001\001\000\016\004\063\006\065" +
    "\007\064\010\061\011\067\012\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\u03b7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\u03bb\004\027\006\034\007" +
    "\033\010\023\012\024\001\001\000\016\004\063\006\065" +
    "\007\064\010\061\011\067\012\062\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero Op_logico Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_BOOLEANA ::= Identificador Punto Identificador Parentesis_a Comillas Identificador Comillas Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Parentesis_a Identificador Multiplicacion Identificador Multiplicacion Identificador Division Numero Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-28)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-20)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Numero P_coma Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador P_coma Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-20)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-19)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Division Identificador Division Identificador Op_logico Identificador Identificador Identificador Identificador Op_logico Parentesis_a Identificador Division Identificador Parentesis_c P_coma Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-25)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Division Identificador Multiplicacion Multiplicacion Identificador Identificador Identificador Multiplicacion Multiplicacion Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-18)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Division Identificador Division Identificador Identificador Identificador Identificador Identificador Identificador Identificador Parentesis_a Identificador Division Identificador Parentesis_c Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-25)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Division Identificador Multiplicacion Multiplicacion Identificador Identificador Identificador Identificador Multiplicacion Multiplicacion Division Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-21)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Division Identificador Multiplicacion Multiplicacion Identificador Identificador Multiplicacion Multiplicacion Division Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-19)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Division Identificador Multiplicacion Multiplicacion Identificador Identificador Identificador Multiplicacion Multiplicacion Division Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-20)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Division Identificador Multiplicacion Multiplicacion Identificador Multiplicacion Multiplicacion Division Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-18)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Division Identificador Identificador Identificador Division Identificador Identificador Identificador Identificador Division Identificador Identificador Identificador Identificador Identificador Division Identificador Identificador Identificador Identificador Identificador Division Identificador Identificador Identificador Identificador Division Identificador Identificador Identificador Identificador Identificador Division Identificador Identificador Identificador Identificador Identificador Division Identificador Identificador Identificador Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-52)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Multiplicacion Multiplicacion Identificador Identificador Identificador Multiplicacion Multiplicacion Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Identificador Igual Parentesis_a Identificador Punto Identificador Multiplicacion Identificador Parentesis_c Multiplicacion Parentesis_a Numero Multiplicacion Parentesis_a Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Parentesis_c Parentesis_c Suma Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Resta Parentesis_a Numero Division Numero Multiplicacion Parentesis_a Identificador Resta Identificador Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-43)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Identificador Igual Numero Division Numero Multiplicacion Parentesis_a Identificador Suma Parentesis_a Numero Multiplicacion Identificador Parentesis_c Suma Identificador Parentesis_c Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-19)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Parentesis_a Identificador Division Numero Parentesis_c Multiplicacion Parentesis_a Identificador Suma Identificador Suma Parentesis_a Identificador Punto Identificador Parentesis_a Identificador Multiplicacion Identificador Parentesis_c Parentesis_c Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-41)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Identificador Punto Identificador Multiplicacion Parentesis_a Identificador Multiplicacion Identificador Parentesis_c Multiplicacion Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-27)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Numero Division Numero Multiplicacion Identificador Punto Identificador Multiplicacion Parentesis_a Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Parentesis_c Multiplicacion Parentesis_a Identificador Suma Identificador Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-42)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Identificador Punto Identificador Multiplicacion Identificador Multiplicacion Parentesis_a Parentesis_a Identificador Multiplicacion Identificador Parentesis_c Resta Parentesis_a Identificador Multiplicacion Identificador Parentesis_c Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-36)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Parentesis_a Numero Division Numero Parentesis_c Multiplicacion Identificador Punto Identificador Multiplicacion Parentesis_a Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Parentesis_c Multiplicacion Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-38)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Parentesis_a Identificador Resta Identificador Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-25)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Parentesis_a Numero Multiplicacion Identificador Punto Identificador Multiplicacion Identificador Multiplicacion Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-33)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= Identificador Igual Identificador Punto Identificador Multiplicacion Parentesis_a Identificador Multiplicacion Identificador Parentesis_c Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= Identificador Igual Parentesis_a Numero Division Numero Parentesis_c Multiplicacion Identificador Punto Identificador Multiplicacion Parentesis_a Identificador Punto Identificador Parentesis_a Identificador Division Numero Numero Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-23)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= Identificador Igual Parentesis_a Numero Division Numero Parentesis_c Multiplicacion Identificador Punto Identificador Multiplicacion Parentesis_a Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Parentesis_c Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-23)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Parentesis_a Identificador Resta Parentesis_a Identificador Multiplicacion Numero Parentesis_c Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-29)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Parentesis_a Identificador Multiplicacion Identificador Multiplicacion Identificador Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-24)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Parentesis_a Identificador Multiplicacion Identificador Multiplicacion Identificador Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-25)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Parentesis_a Identificador Multiplicacion Identificador Multiplicacion Identificador Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-23)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= T_dato Identificador Igual Parentesis_a Parentesis_a Identificador Multiplicacion Identificador Punto Identificador Parentesis_c Division Numero Parentesis_c Multiplicacion Parentesis_a Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Suma Parentesis_a Identificador Multiplicacion Identificador Parentesis_c Suma Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-38)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-18)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= T_dato Identificador Igual Numero Punto Numero Multiplicacion Identificador Punto Identificador Multiplicacion Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-18)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= T_dato Identificador Igual Parentesis_a Identificador Punto Identificador Multiplicacion Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Parentesis_c Multiplicacion Parentesis_a Identificador Resta Parentesis_a Identificador Division Numero Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-26)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= T_dato Identificador Igual Parentesis_a Parentesis_a Identificador Punto Identificador Multiplicacion Identificador Parentesis_c Division Numero Parentesis_c Multiplicacion Parentesis_a Parentesis_a Numero Multiplicacion Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Parentesis_c Suma Parentesis_a Numero Multiplicacion Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Parentesis_c Suma Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-48)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Identificador Identificador Identificador Identificador Identificador Identificador Identificador P_coma Comillas Suma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-19)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Numero Punto Resta Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Numero Punto Resta Identificador Identificador Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Numero Punto Resta Identificador Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Numero Punto Resta Identificador Identificador Identificador Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Division Identificador Identificador P_coma Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Division Identificador Multiplicacion Multiplicacion Identificador Multiplicacion Multiplicacion Division Identificador Division Identificador Identificador Identificador Division Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-24)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Reservada Punto Reservada Punto Identificador Parentesis_a Comillas Division Identificador Identificador Identificador Identificador Identificador Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Identificador Igual Identificador Multiplicacion Identificador Multiplicacion Identificador Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= T_dato Identificador Identificador Identificador Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= T_dato Identificador Identificador Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_dato Identificador Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= T_dato Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Reservada P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Reservada Reservada Reservada Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Identificador Identificador Identificador Igual Identificador Identificador Parentesis_a Identificador Punto Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Reservada Reservada Identificador Igual Reservada Reservada Parentesis_a Reservada Punto Reservada Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Identificador Identificador Igual Reservada Identificador Parentesis_a Reservada Identificador Parentesis_a Reservada Punto Reservada Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Identificador Identificador Punto Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Reservada Reservada Reservada Main Parentesis_a T_dato Corchete_a Corchete_c Reservada Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= T_dato Identificador Igual Identificador Punto Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Identificador Igual Identificador Punto Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Identificador Igual Parentesis_a Parentesis_a Numero Multiplicacion Parentesis_a Identificador Punto Identificador Parentesis_a Identificador Numero Parentesis_c Parentesis_c Parentesis_c Multiplicacion Identificador Parentesis_c Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-21)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Identificador Igual Identificador Punto Identificador Parentesis_a Identificador Punto Identificador Parentesis_a Parentesis_c Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Reservada T_dato Identificador Parentesis_a Parentesis_c Identificador Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Reservada T_dato Identificador Parentesis_a T_dato Identificador Parentesis_c Identificador Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Reservada T_dato Identificador Parentesis_a Int Identificador Parentesis_c Identificador Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Reservada Int Identificador Parentesis_a Int Identificador Parentesis_c Identificador Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Identificador Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Reservada Reservada Int Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Reservada Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador Igual Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Reservada Reservada Reservada Main Parentesis_a T_dato Corchete_a Corchete_c Reservada Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Identificador Identificador Punto Identificador Punto Reservada P_coma INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Reservada Identificador Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

